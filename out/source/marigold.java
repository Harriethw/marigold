/* autogenerated by Processing revision 1280 on 2022-02-11 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class marigold extends PApplet {


int yellow = 0xFFFFF74D;
int lightOrange = 0xFFFAC53F;
int mediumOrange = 0xFFFFB905;
int darkOrange = 0xFFFF980F;

int[] colors = {lightOrange, mediumOrange, darkOrange,mediumOrange, darkOrange};

int maxLayers = 9;
int layers = 1;
float petalSize = 10;
boolean isGrowing = true;

 public void setup() {
  /* size commented out by preprocessor */;
  ortho();
  frameRate(3);
  // noStroke();
  draw();
}

 public void draw() {
  background(0xFFF47983);
  drawRow();
  translate(0, 300);
  drawRow();
  translate(0, 300);
  drawRow();
  changeLayers();

  // noLoop();
  println("layers: "+layers);
  println("petalSize: "+petalSize);
  setIsGrowing();
}

 public void drawRow () {
  pushMatrix();
  translate(150, 150);
  drawRose();
  translate(300, 0);
  drawRose();
  translate(300, 0);
  drawRose();
  popMatrix();
}


 public void drawRose() {
  float rotation = 45;
  float layerPetalSize = petalSize;
  pushMatrix();
  for (int i = 0; i < layers; ++i) {
    translate(0,0, -i);
    drawPetals(layerPetalSize);
    // rotate(radians(rotation));
    if (i < (maxLayers /2)) {
    layerPetalSize = layerPetalSize * 1.4f;
    } else {
      layerPetalSize = layerPetalSize * 1.5f;
    }
  }
  popMatrix();
  drawCenter();
}

 public void changeLayers() {
  if (isGrowing) {
    layers = layers + 1;
  } else {
    layers = layers - 1;
  }
}

 public void drawPetals(float petalSize) {
  //TODO: increase number of petals depending on layer;
  //TODO: grow petals over time until max size, then move on to next layer - have a variable to hold which layer is growing
  for (int i = 0; i < 8; i++) {
    translate(0,0, -i);
    fill(colors[PApplet.parseInt(random(3))]);
    // fill(colors[i]);
    ellipse(0, -(petalSize / 1.8f), petalSize, petalSize);
    rotate(radians(45));
    // rotate(radians(frameCount + mouseX));
  }
}

 public void drawCenter() {
  pushMatrix();
    translate(0,0,+1);
    fill(yellow);
    ellipse(0, 0, 10, 10);
  popMatrix();
}

 public void setIsGrowing() {
  if (layers == maxLayers){
    isGrowing = false;
  } else if (layers == 1) {
    isGrowing = true;
  }
}


  public void settings() { size(900, 900, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "marigold" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
